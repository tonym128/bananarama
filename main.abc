#title "Bananarama"
#description "A runner game for the Arduboy Banana Game Jam"
#author "Tony Mamacos"
#version "1.2"
#url "https://community.arduboy.com/t/bananarama/12666"
#sourceUrl "https://github.com/tonym128/bananarama"
#shades "4"

constexpr sprites LOGO = sprites{ 128x14 "media/logo.png" };
constexpr sprites BACK_1 = sprites{ 128x32 "media/back_1a.png" };
constexpr sprites BACK_2 = sprites{ 128x32 "media/back_2a.png" };
constexpr sprites TREE = sprites{ 176x32 "media/tree.png" };
constexpr sprites BANANA4 = sprites{ 4x4 "media/banana4.png" };
constexpr sprites BANANA8 = sprites{ 8x8 "media/banana8.png" };
constexpr sprites BANANA12 = sprites{ 12x12 "media/banana12.png" };
constexpr sprites BANANA16 = sprites{ 16x16 "media/banana16.png" };
constexpr sprites BANANA20 = sprites{ 20x20 "media/banana20.png" };
constexpr sprites BANANA24 = sprites{ 24x24 "media/banana24.png" };
constexpr sprites BANANA28 = sprites{ 28x28 "media/banana28.png" };
constexpr sprites BANANA32 = sprites{ 32x32 "media/banana32.png" };
constexpr sprites STEPL = sprites{ 24x24 "media/monkey24sl.png" };
constexpr sprites STEPR = sprites{ 24x24 "media/monkey24sr.png" };
constexpr sprites A_BUTTON_1 = sprites{ 32x16 "media/a_button.png" };
constexpr sprites A_BUTTON_2 = sprites{ 32x16 "media/a_button_2.png" };
constexpr sprites B_BUTTON_1 = sprites{ 32x16 "media/b_button.png" };
constexpr sprites B_BUTTON_2 = sprites{ 32x16 "media/b_button_2.png" };

int screen = 0;
bool grow = 0;
u32 milli = 0;

saved bool save_sfx;
saved bool save_music;
saved bool save_exists;
saved u32 save_score;

u32 score = 0;
u8 playerCol = 1;
u8 playerPos = 52;
int treeX = -26;
u8 player0Pos = 0;
u8 player1Pos = 52;
u8 player2Pos = 96;

struct banana {
    int x;
    int y;
    bool dx;
    bool dy;
    u8 size;
    bool ds;
};

struct gameRow {
    u8 distance;
    u8 col0;
    u8 col1;
    u8 col2;
    bool collected;
};

gameRow[5] gameRows = {
{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},
};

banana[10] bananas = {
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
};

void drawBananas() {
    if ($millis() > milli+333) {
        milli = $millis();
        grow = true;
    }

    for (int i = 0; i<10; i++) {
        if (grow) {
            if (bananas[i].ds) {
                bananas[i].size -= 1;
            } else {
                bananas[i].size += 1;
            }
        }

        if (bananas[i].size == 7) {
            bananas[i].ds = 1;
            }
        else if (bananas[i].size == 0) {
            bananas[i].ds = 0;
            }

        if (bananas[i].dx) {
            bananas[i].x = bananas[i].x + 1;
        } else {
            bananas[i].x = bananas[i].x - 1;
        }
        if (bananas[i].x > 128-16) {
            bananas[i].dx = !bananas[i].dx;
            bananas[i].x = 128-16;
        }
        if (bananas[i].x < 0) {
            bananas[i].dx = !bananas[i].dx;
            bananas[i].x = 0;
        }

        if (bananas[i].dy) {
            bananas[i].y = bananas[i].y + 1;
        } else {
            bananas[i].y = bananas[i].y - 1;
        }

        if (bananas[i].y > 64-16) {
            bananas[i].dy = !bananas[i].dy;
            bananas[i].y = 64-16;
        }
        if (bananas[i].y < 0) {
            bananas[i].dy = !bananas[i].dy;
            bananas[i].y = 0;
        }

        switch (bananas[i].size) {
            case(0) $draw_sprite(bananas[i].x+14,bananas[i].y+14, BANANA4, 0);
            case(1) $draw_sprite(bananas[i].x+12,bananas[i].y+12, BANANA8, 0);
            case(2) $draw_sprite(bananas[i].x+10,bananas[i].y+10, BANANA12, 0);
            case(3) $draw_sprite(bananas[i].x+8,bananas[i].y+8, BANANA16, 0);
            case(4) $draw_sprite(bananas[i].x+6,bananas[i].y+6, BANANA20, 0);
            case(5) $draw_sprite(bananas[i].x+4,bananas[i].y+4, BANANA24, 0);
            case(6) $draw_sprite(bananas[i].x+2,bananas[i].y+2, BANANA28, 0);
            case(7) $draw_sprite(bananas[i].x,bananas[i].y, BANANA32, 0);
        }
    }

    grow = false;
}

void setup() {
    $generate_random_seed();
    $init_random_seed();
    $set_frame_rate(30);

    for (int i = 0; i<10; i++) {
        bananas[i].x = $random_range(0,128);
        bananas[i].y = $random_range(0,64);
        bananas[i].dx = $random_range(0,2);
        bananas[i].dy = $random_range(0,2);
        bananas[i].size = $random_range(0,8);
        bananas[i].ds = $random_range(0,2);
    }
}

void main_menu_setup() {
    milli = 0;
    screen += 1;
}

void main_menu() {

    drawBananas();
    $draw_sprite(0,16, LOGO, 0);
    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"High:%d", save_score);

    if ($millis()/1000 % 2 == 0) {
        $draw_sprite(96, 32, A_BUTTON_1, 0);
    } else {
        $draw_sprite(96, 32, A_BUTTON_2, 0);
    }

    if (save_music) {
        $draw_sprite(96, 48, B_BUTTON_1, 0);
    } else {
        $draw_sprite(96, 48, B_BUTTON_2, 0);
    }

    if ($just_pressed(A_BUTTON)) {
        screen += 1;
    }

    if ($just_pressed(B_BUTTON)) {
        save_music = !save_music;
        save_sfx = save_music;
        $save();
        if (save_music) {
            $audio_enabled();
        } else
        {
            $audio_stop();
        }
    }

    if (save_music && !$audio_playing()) {
        $music_play(music{ "media/song1.mid" });
    }

    if(!save_music && $audio_playing()) {
        $music_stop();
    }
}

void draw_banana(u8 column, u8 distance)
{
    // distance goes from 32 far to 1 close, 0 not in use
    // column is value of 1,2,3
    int x = 32+distance;
    int y = distance;
    int sizeMod = (32 - distance);
    int size = 0;
    if (distance > 28) size = 0;
    else if (distance > 24) size = 1;
    else if (distance > 20) size = 2;
    else if (distance > 16) size = 3;
    else if (distance > 12) size = 4;
    else if (distance > 8) size = 5;
    else if (distance > 4) size = 6;
    else size = 7;

    switch (size) {
        case(0) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA4, 0);
        case(1) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA8, 0);
        case(2) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA12, 0);
        case(3) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA16, 0);
        case(4) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA20, 0);
        case(5) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA24, 0);
        case(6) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA28, 0);
        case(7) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA32, 0);
    }

}

void draw_wall(u8 column, u8 distance, u8 color)
{
    // distance goes from 32 far to 0 close
    // column is value of 1,2,3
    // color is GRAY, DARK_GRAY, WHITE
    int x = 32+distance;
    int y = distance;
    int size = 1 + (32 - distance)*2;
    $draw_filled_rect((column-1)*size + x,y,size,size,color);
}

void game_start_setup()
{
    screen += 1;
    score = 0;
    milli = $millis();
}

void game_start() {
    u32 mill = $millis() - milli;

    int seconds = mill/1000;
    int sizeX = 128 - (mill)%1000/8;
    int sizeY = sizeX/2;

    int posX = (mill)%1000/16;
    int posY = posX/2;

    if (seconds >= 3) {
        screen += 1;
        milli = $millis();
        return;
    }

    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"High:%d", save_score);

    switch (seconds) {
        case(0) {
            $draw_filled_rect(posX,posY,sizeX,sizeY, LIGHT_GRAY);
            $set_text_color(DARK_GRAY);
            $draw_sprite(16,16 , BANANA32, 0);
            $draw_sprite(48,16 , BANANA32, 0);
            $draw_sprite(72,16 , BANANA32, 0);
        }
        case(1) {
            $draw_filled_rect(posX,posY,sizeX,sizeY, DARK_GRAY);
            $set_text_color(LIGHT_GRAY);
            $draw_sprite(32,16 , BANANA32, 0);
            $draw_sprite(64,16 , BANANA32, 0);
        }
        case(2) {
            $draw_filled_rect(posX,posY,sizeX,sizeY, DARK_GRAY);
            $set_text_color(WHITE);
            $draw_sprite(48,16 , BANANA32, 0);
        }
    }
}

int moveTick = 0;
int moveCount = 0;
int spawnTicker = 0;
int spawnTicks = 0;
bool anim2Tick = false;

void move_row(int src, int dst) {
    gameRows[dst].distance = gameRows[src].distance;
    gameRows[dst].col0 = gameRows[src].col0;
    gameRows[dst].col1 = gameRows[src].col1;
    gameRows[dst].col2 = gameRows[src].col2;
    gameRows[dst].collected = gameRows[src].collected;
}

void game_create_row() {
    u8 max_walls = 1;
    if (score > 15) {
        max_walls = 2;
    }

    move_row(1,0);
    move_row(2,1);
    move_row(3,2);
    move_row(4,3);

    gameRows[4].distance = 32;
    gameRows[4].col0 = 0;
    gameRows[4].col1 = 0;
    gameRows[4].col2 = 0;
    gameRows[4].collected = 0;

    u8 walls = $random_range(0,max_walls+1);
    for (int i = 0; i < walls; i++) {
        u8 column = $random_range(0,3);
        u8 color = $random_range(0,3);
        switch (column) {
            case(0) gameRows[4].col0 = 2+color;
            case(1) gameRows[4].col1 = 2+color;
            case(2) gameRows[4].col2 = 2+color;
        }
    }

    u8 banana = $random_range(0,2);
    if (banana == 0) {
        u8 column = $random_range(0,3);
        switch (column) {
            case(0) gameRows[4].col0 = 1;
            case(1) gameRows[4].col1 = 1;
            case(2) gameRows[4].col2 = 1;
        }
    }

}

void game_hit_check(u8 item, u8 row) {
    if (item == 0) {return;}
    else if (item == 1) {
        if (!gameRows[row].collected) {
            $tones_play_auto(tones{ C6 100 E6 100 G6 100 });
            gameRows[row].collected = 1;
            score += 1;
            if (score % 5 == 0) {
                if (moveTick > 2) {
                    moveTick -= 1;
                }
            }
            if (score % 3 == 0) {
                if (spawnTicks > 8) {
                    spawnTicks -= 1;
                }
            }
        }
    }
    else {
        $tones_play_auto(tones{ G6 200 E6 200 C6 400 });
        screen += 1;
        }
}

void game_update() {
    // Move the walls
    moveCount += 1;
    if (moveCount > moveTick) {
        moveCount = 0;
        spawnTicker += 1;
        anim2Tick = !anim2Tick;
        for (int i = 0; i < 5; i++) {
            if (gameRows[i].distance > 0) {
                if (gameRows[i].distance <= 32) {
                    gameRows[i].distance--;
                }
            }
        }
    }

    // Spawn new walls
    if (spawnTicker > spawnTicks) {
        spawnTicker = 0;
        game_create_row();
    }

    // move the player
    switch (playerCol) {
        case(0) update_player(player0Pos);
        case(1) update_player(player1Pos);
        case(2) update_player(player2Pos);
    }

    // Check for any banana and wall hit
    for (int i = 0; i < 5; i++) {
        if (gameRows[i].distance == 1) {
            switch (playerCol) {
                case(0) game_hit_check(gameRows[i].col0, i);
                case(1) game_hit_check(gameRows[i].col1, i);
                case(2) game_hit_check(gameRows[i].col2, i);
            }
        }
    }

    // Play music
    if (save_music && !$audio_playing()) {
        u8 song = score / 3;
        if (song > 3) {
            $music_play(music{ "media/song5.mid" });
        } 
        switch (song) {
            case (0) $music_play(music{ "media/song1.mid" });
            case (1) $music_play(music{ "media/song2.mid" });
            case (2) $music_play(music{ "media/song3.mid" });
            case (3) $music_play(music{ "media/song4.mid" });
        }
    }
}

void draw_row_col(int distance, int col, int val) {
    switch (val) {
        case(1) draw_banana(col, distance);
        case(2) draw_wall(col, distance, GRAY);
        case(3) draw_wall(col, distance, DARK_GRAY);
        case(4) draw_wall(col, distance, WHITE);
    }
}

void game_setup()
{
    screen += 1;

    // Starting values
    treeX = -26;
    score = 0;
    moveCount = 0;
    moveTick = 4;
    spawnTicker = 20;
    spawnTicks = 20;
    playerCol = 1;
    playerPos = player1Pos;
    for (int i = 0; i < 5; i++) {
        gameRows[i].distance = 0;
    }
}

void game_input() {
    // Take player input
    //bool canMove = true;
    //switch (playerPos) {
    //    case(0) canMove = true;
    //    case(52) canMove = true;
    //    case(96) canMove = true;
    //}

    //if (canMove) {
        if ($just_pressed(LEFT_BUTTON)) {
            if (playerCol > 0) {
                playerCol--;
            }
        }
        else if ($just_pressed(RIGHT_BUTTON)) {
            if (playerCol < 2) {
                playerCol += 1;
            }
        }
    //}
}

void update_player(int dPos) {
    if (dPos != playerPos) {
        if (dPos < playerPos) {
            playerPos-=2;
            treeX+=1;
        }
        else if (dPos > playerPos) {
            playerPos+=2;
            treeX-=1;
        }
    }
}

void draw_player() {
    if (anim2Tick) { $draw_sprite(playerPos, 40, STEPL, 0); }
    else { $draw_sprite(playerPos, 40, STEPR, 0); }
}

void game() {
    game_input();
    game_update();

    // Draw Lanes
    if (anim2Tick) { $draw_sprite(0, 32, BACK_1, 0); }
    else { $draw_sprite(0, 32, BACK_2, 0); }

    $draw_sprite(treeX, 0, TREE, 0);

    // Draw Rows
    for (int i = 4; i >= 0; i--) {
        if (gameRows[i].distance > 0) {
            if (gameRows[i].distance <= 32) {
                draw_row_col(gameRows[i].distance, 0, gameRows[i].col0);
                draw_row_col(gameRows[i].distance, 1, gameRows[i].col1);
                draw_row_col(gameRows[i].distance, 2, gameRows[i].col2);
            }
        }
    }

    // Draw Player
    draw_player();
    // Draw Scores
    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"Score:%d", score);
    $draw_textf(80, 10,"High:%d", save_score);

}

void end_game_start() {
    screen += 1;
    if (score > save_score) {
        save_score = score;
        $save();
    }

    quote = $random_range(0,11);
}

int quote = 0;
void draw_random_quote() {
    switch(quote) {
        case (0) $draw_text_P(5, 44,"Banana's can be\nblack, red and blue");
        case (1) $draw_text_P(5, 44,"Banana's are\nnot a tree");
        case (2) $draw_text_P(5, 44,"Banana's are a\nbig herb");
        case (3) $draw_text_P(5, 44,"You can eat\nthe flower");
        case (4) $draw_text_P(5, 44,"The trunk can\nbe woven");
        case (5) $draw_text_P(5, 44,"You can eat\nthe trunk");
        case (6) $draw_text_P(5, 44,"Banana skin\nhelps reduce\nitching");
        case (7) $draw_text_P(5, 44,"Once overripe,\ncan be made\ninto vingegar");
        case (8) $draw_text_P(5, 44,"Once overripe,\ncan be made\ninto wine");
        case (9) $draw_text_P(5, 44,"Can help reduce\nmuscle spasms");
        case (10) $draw_text_P(5, 44,"Scientific name\nis Musa\nAcuminata Colla");
        case (11) $draw_text_P(5, 44,"A medium banana\nhas about\n15g of sugar");
    }
}

void end_game() {
    if ($just_pressed(A_BUTTON)) {
        screen = 0;
    }
    if ($just_pressed(B_BUTTON)) {
        screen = 0;
    }

    drawBananas();

    $set_text_color(WHITE);
    $draw_text_P(15, 32,"Bananarama Fact");

    // Draw Scores
    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"Score:%d", score);
    $draw_textf(80, 10,"High:%d", save_score);

    // Banana quote
    $set_text_color(LIGHT_GRAY);
    draw_random_quote();
}

void main()
{
    setup();
    if (!$load()) {
        save_exists = 1;
        save_score = 0;
        save_music = 1;
        save_sfx = 1;
    }

    if (save_music) {
        $audio_enabled();
    }

    while(1) {
        switch (screen) {
            case(0) main_menu_setup();
            case(1) main_menu();
            case(2) game_start_setup();
            case(3) game_start();
            case(4) game_setup();
            case(5) game();
            case(6) end_game_start();
            case(7) end_game();
        }
        $display();
    }
}

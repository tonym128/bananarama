#title "Bananarama"
#description "A runner game for the Arduboy Banana Game Jam"
#author "Tony Mamacos"
#version "0.1"
#url "https://community.arduboy.com/t/bananarama/12666"
#sourceUrl "https://github.com/tonym128/bananarama"
#shades "4"

constexpr sprites BANANA4 = sprites{ 4x4 "media/banana4.png" };
constexpr sprites BANANA8 = sprites{ 8x8 "media/banana8.png" };
constexpr sprites BANANA12 = sprites{ 12x12 "media/banana12.png" };
constexpr sprites BANANA16 = sprites{ 16x16 "media/banana16.png" };
constexpr sprites BANANA20 = sprites{ 20x20 "media/banana20.png" };
constexpr sprites BANANA24 = sprites{ 24x24 "media/banana24.png" };
constexpr sprites BANANA28 = sprites{ 28x28 "media/banana28.png" };
constexpr sprites BANANA32 = sprites{ 32x32 "media/banana32.png" };

int screen = 4;
bool grow = 0;
u32 milli = 0;
saved bool save_exists;
saved u32 save_score;
u32 score = 0;

struct banana {
    int x;
    int y;
    bool dx;
    bool dy;
    u8 size;
    bool ds;
};

banana[15] bananas = {
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
};

void drawBananas() {
    if ($millis() > milli+333) {
        milli = $millis();
        grow = true;
    }
    
    for (int i = 0; i<15; i++) {
        if (grow) {
            if (bananas[i].ds) {
                bananas[i].size -= 1;
            } else {
                bananas[i].size += 1;
            }
        }
        
        if (bananas[i].size == 7) {
            bananas[i].ds = 1;
            }
        else if (bananas[i].size == 0) {
            bananas[i].ds = 0;
            }

        if (bananas[i].dx) {
            bananas[i].x = bananas[i].x + 1;
        } else {
            bananas[i].x = bananas[i].x - 1;
        }
        if (bananas[i].x > 128-16) { 
            bananas[i].dx = !bananas[i].dx;
            bananas[i].x = 128-16;
        }
        if (bananas[i].x < 0) {
            bananas[i].dx = !bananas[i].dx;
            bananas[i].x = 0;
        }
    
        if (bananas[i].dy) {
            bananas[i].y = bananas[i].y + 1;
        } else {
            bananas[i].y = bananas[i].y - 1;
        }

        if (bananas[i].y > 64-16) { 
            bananas[i].dy = !bananas[i].dy;
            bananas[i].y = 64-16;
        }
        if (bananas[i].y < 0) {
            bananas[i].dy = !bananas[i].dy;
            bananas[i].y = 0;
        }
        
        switch (bananas[i].size) {
            case(0) $draw_sprite(bananas[i].x+14,bananas[i].y+14, BANANA4, 0);
            case(1) $draw_sprite(bananas[i].x+12,bananas[i].y+12, BANANA8, 0);
            case(2) $draw_sprite(bananas[i].x+10,bananas[i].y+10, BANANA12, 0);
            case(3) $draw_sprite(bananas[i].x+8,bananas[i].y+8, BANANA16, 0);
            case(4) $draw_sprite(bananas[i].x+6,bananas[i].y+6, BANANA20, 0);
            case(5) $draw_sprite(bananas[i].x+4,bananas[i].y+4, BANANA24, 0);
            case(6) $draw_sprite(bananas[i].x+2,bananas[i].y+2, BANANA28, 0);
            case(7) $draw_sprite(bananas[i].x,bananas[i].y, BANANA32, 0);
        }
    }
    
    grow = false;
}

void setup() {
    $generate_random_seed();
    $init_random_seed();
    $set_frame_rate(30);

    for (int i = 0; i<15; i++) {
        bananas[i].x = $random_range(0,128);
        bananas[i].y = $random_range(0,64);
        bananas[i].dx = $random_range(0,2);
        bananas[i].dy = $random_range(0,2);
        bananas[i].size = $random_range(0,8);
        bananas[i].ds = $random_range(0,2);
    }
}

void main_menu_setup() {
    milli = 0;
    screen++;
}

void main_menu() {
    drawBananas();
    $set_text_color(WHITE);
    $draw_text_P(30, 32,"Bananarama");
    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"High:%d", save_score);

    if ($millis()/1000 % 2 == 0) {
        $set_text_color(LIGHT_GRAY);
        $draw_text_P(16, 48,"Press A to Start");
    }

    if ($just_pressed(A_BUTTON)) {
        screen += 1;
    }
}

void draw_banana(u8 column, u8 distance)
{
    // distance goes from 32 far to 0 close
    // column is value of 1,2,3
    int x = 32+distance;
    int y = distance;
    int sizeMod = (32 - distance);
    int size = 0;
    if (distance > 28) size = 0;
    else if (distance > 24) size = 1;
    else if (distance > 20) size = 2;
    else if (distance > 16) size = 3;
    else if (distance > 12) size = 4;
    else if (distance > 8) size = 5;
    else if (distance > 4) size = 6;
    else size = 7;
    
    switch (size) {
        case(0) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA4, 0);
        case(1) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA8, 0);
        case(2) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA12, 0);
        case(3) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA16, 0);
        case(4) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA20, 0);
        case(5) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA24, 0);
        case(6) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA28, 0);
        case(7) $draw_sprite((column-1)*sizeMod*2+sizeMod/2 + x, y+sizeMod, BANANA32, 0);
    }
    
}

void draw_wall(u8 column, u8 distance, u8 color)
{
    // distance goes from 32 far to 0 close
    // column is value of 1,2,3
    // color is GRAY, DARK_GRAY, WHITE
    int x = 32+distance;
    int y = distance;
    int size = 1 + (32 - distance)*2;
    $draw_filled_rect((column-1)*size + x,y,size,size,color);
}

void game_setup() 
{
    screen++;
    score = 0;
    milli = $millis();
}

void game_start() {
    u32 mill = $millis() - milli;
    int seconds = mill/1000;
    int sizeX = 128 - (mill)%1000/8;
    int sizeY = sizeX/2;
 
    int posX = (mill)%1000/16;
    int posY = posX/2;

    if (seconds >= 3) {
        screen++;
    }

    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"High:%d", save_score);

    switch (seconds) {
        case(0) {
            $draw_filled_rect(posX,posY,sizeX,sizeY, LIGHT_GRAY);
            $set_text_color(DARK_GRAY);
            $draw_textf(60,36, "3");
        }
        case(1) {
            $draw_filled_rect(posX,posY,sizeX,sizeY, DARK_GRAY);
            $set_text_color(LIGHT_GRAY);
            $draw_textf(60,36, "2");
        }
        case(2) {
            $draw_filled_rect(posX,posY,sizeX,sizeY, DARK_GRAY);
            $set_text_color(WHITE);
            $draw_textf(60,36, "1");
        }
    }
}

int wall1 = 32;

void game() {
    $set_text_color(DARK_GRAY);
    $draw_textf(1, 10,"High:%d", save_score);

    draw_wall(0,wall1,LIGHT_GRAY);
    draw_wall(1,wall1,DARK_GRAY);
    draw_wall(2,wall1,LIGHT_GRAY);
    draw_banana(0,wall1);
    draw_banana(1,wall1);
    draw_banana(2,wall1);

    if ($just_pressed(A_BUTTON)) {
        wall1 -= 1;
    }
    
}

void end_game_start() {
    screen++;
    if (score > save_score) {
        save_score = score;
        $save();
    }
}

void end_game() {

    if ($just_pressed(A_BUTTON) || $just_pressed(B_BUTTON)) {
        screen = 0;
    }
}

void main()
{
    setup();
    if (!$load()) {
        save_exists = 1;
        save_score = 0;
    }
        
    while(1) {
        switch (screen) {
            case(0) main_menu_setup();
            case(1) main_menu();
            case(2) game_setup();
            case(3) game_start();
            case(4) game();
            case(5) end_game_start();
            case(6) end_game();
        }
        $display();
    }    
}
